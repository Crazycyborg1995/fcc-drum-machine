{"version":3,"sources":["components/Keynotes.js","App.js","serviceWorker.js","index.js"],"names":["Keynotes","handleClick","e","key","currentTarget","getAttribute","_this","props","playAudio","_this$props$keynotes","this","keynotes","keyCode","keyTrigger","url","name","react_default","a","createElement","data-key","id","className","onClick","src","Component","App","state","removeTransition","propertyName","target","classList","remove","audio","document","querySelector","concat","div","display","getElementById","textContent","setTimeout","add","currenTime","play","keyListener","stopPropagation","_this2","window","addEventListener","Array","from","querySelectorAll","forEach","_this3","map","notes","index","components_Keynotes","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAqBeA,oNAhBbC,YAAc,SAACC,GACb,IAAIC,EAAMD,EAAEE,cAAcC,aAAa,YACvCC,EAAKC,MAAMC,UAAUL,4EAGd,IAAAM,EAC6BC,KAAKH,MAAMI,SAA1CC,EADEH,EACFG,QAAQC,EADNJ,EACMI,WAAWC,EADjBL,EACiBK,IAAIC,EADrBN,EACqBM,KAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,WAAUP,EAASQ,GAAIL,EAAMM,UAAU,WAAWC,QAASZ,KAAKT,aACnEe,EAAAC,EAAAC,cAAA,WAAML,GACNG,EAAAC,EAAAC,cAAA,SAAOK,IAAKT,EAAKO,UAAU,OAAOF,WAAUP,EAASQ,GAAIP,YAb1CW,cC6FRC,6MAxFfd,SACA,CAAC,CACCC,QAAS,GACPC,WAAY,IACZE,KAAM,WACND,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,WACND,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,WACND,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,WACND,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,OACND,IAAK,4DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,UACND,IAAK,0DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,cACND,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,OACND,IAAK,8DACJ,CACDF,QAAS,GACTC,WAAY,IACZE,KAAM,YACND,IAAK,6DAEPY,MAAQpB,EAAKK,WAQbgB,iBAAmB,SAACzB,GACK,cAAnBA,EAAE0B,cACN1B,EAAE2B,OAAOC,UAAUC,OAAO,eAE5BvB,UAAY,SAACL,GACX,IAAI6B,EAAQC,SAASC,cAAT,mBAAAC,OAA0ChC,EAA1C,OACRiC,EAAMH,SAASC,cAAT,iBAAAC,OAAwChC,EAAxC,OACNkC,EAAUJ,SAASK,eAAe,WAClCN,IACJK,EAAQE,YAAcH,EAAI/B,aAAa,MACvCmC,WAAW,WACTH,EAAQE,YAAc,IACtB,KACFH,EAAIN,UAAUW,IAAI,YAClBT,EAAMU,WAAa,EACnBV,EAAMW,WAGRC,YAAc,SAAA1C,GACZA,EAAE2C,kBACF,IAAI1C,EAAMD,EAAEU,QACZN,EAAKE,UAAUL,uFA3BE,IAAA2C,EAAApC,KACjBqC,OAAOC,iBAAiB,UAAUtC,KAAKkC,aAAY,GACxCK,MAAMC,KAAKjB,SAASkB,iBAAiB,cAC3CC,QAAQ,SAAAjD,GAAG,OAAIA,EAAI6C,iBAAiB,gBAAgBF,EAAKnB,qDA0BvD,IAAA0B,EAAA3C,KACP,OACEM,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACHV,KAAKgB,MAAM4B,IAAI,SAACC,EAAMC,GAAP,OAAiBxC,EAAAC,EAAAC,cAACuC,EAAD,CAAUtD,IAAKqD,EAAOhD,UAAW6C,EAAK7C,UAAWG,SAAU4C,cApFpF/B,aCOEkC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAAS/B,SAASK,eAAe,SD4H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.186dd392.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Keynotes extends Component {\r\n\r\n  \r\n  handleClick = (e) => {\r\n    let key = e.currentTarget.getAttribute(\"data-key\");\r\n    this.props.playAudio(key);\r\n  } \r\n\r\n  render() {\r\n    let {keyCode,keyTrigger,url,name} = this.props.keynotes;\r\n    return (\r\n      <div data-key={keyCode} id={name} className=\"drum-pad\" onClick={this.handleClick}>\r\n        <kbd>{keyTrigger}</kbd>\r\n        <audio src={url} className=\"clip\" data-key={keyCode} id={keyTrigger}></audio>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Keynotes\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Keynotes from '../src/components/Keynotes'\n\n\nclass App extends Component {\n \nkeynotes = \n[{\n  keyCode: 81,\n    keyTrigger: 'Q',\n    name: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    name: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    name: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    name: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    name: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    name: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    name: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    name: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    name: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  }]\n  state = this.keynotes;\n  \n  componentDidMount(){\n    window.addEventListener(\"keydown\",this.keyListener,false)\n    let keys = Array.from(document.querySelectorAll(\".drum-pad\"));\n    keys.forEach(key => key.addEventListener('transitionend',this.removeTransition));\n\n  }\n  removeTransition = (e) => {\n    if (e.propertyName !== 'transform') return;\n    e.target.classList.remove('animator');\n  }\n  playAudio = (key) => {\n    let audio = document.querySelector(`audio[data-key=\"${key}\"]`); // dont forget \"quotes\"\n    let div = document.querySelector(`div[data-key=\"${key}\"]`);\n    let display = document.getElementById(\"display\");\n    if(!audio) return;\n    display.textContent = div.getAttribute(\"id\");\n    setTimeout(function(){\n      display.textContent = '';\n    },500)\n    div.classList.add(\"animator\");\n    audio.currenTime = 0;\n    audio.play();\n  }\n\n  keyListener = e => {\n    e.stopPropagation();\n    let key = e.keyCode;\n    this.playAudio(key);\n  }\n  render() {\n    return (\n      <div id=\"drum-machine\">\n      <div id=\"display\"></div>\n          {this.state.map((notes,index) => <Keynotes key={index} playAudio={this.playAudio} keynotes={notes} />)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}